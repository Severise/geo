{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\julia\\\\Desktop\\\\geo\\\\geo\\\\src\\\\PrivateRoute.jsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom'; // import { authenticationService } from '@/_services';\n\nexport const PrivateRoute = ({\n  component: Component,\n  roles,\n  ...rest\n}) =>\n/*#__PURE__*/\nReact.createElement(Route, Object.assign({}, rest, {\n  render: props => {\n    // const currentUser = authenticationService.currentUserValue;\n    console.log('current');\n    console.log(this.props);\n    console.log(this.state);\n    console.log(currentUser);\n\n    if (!currentUser) {\n      // not logged in so redirect to login page with the return url\n      return (\n        /*#__PURE__*/\n        React.createElement(Redirect, {\n          to: {\n            pathname: '/login',\n            state: {\n              from: props.location\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 20\n          }\n        })\n      );\n    } // check if route is restricted by role\n\n\n    if (roles && roles.indexOf(currentUser.role) === -1) {\n      // role not authorised so redirect to home page\n      //????? direct to stud or teac page\n      return (\n        /*#__PURE__*/\n        React.createElement(Redirect, {\n          to: {\n            pathname: '/'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 20\n          }\n        })\n      );\n    } // authorised so return component\n\n\n    return (\n      /*#__PURE__*/\n      React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 16\n        }\n      }))\n    );\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}));","map":{"version":3,"sources":["C:/Users/julia/Desktop/geo/geo/src/PrivateRoute.jsx"],"names":["React","Route","Redirect","PrivateRoute","component","Component","roles","rest","props","console","log","state","currentUser","pathname","from","location","indexOf","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC,C,CAEA;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,KAAxB;AAA+B,KAAGC;AAAlC,CAAD;AAAA;AACxB,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,EAAA,MAAM,EAAEC,KAAK,IAAI;AAC9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYE,WAAZ;;AACA,QAAI,CAACA,WAAL,EAAkB;AACd;AACA;AAAA;AAAO,4BAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEC,YAAAA,QAAQ,EAAE,QAAZ;AAAsBF,YAAAA,KAAK,EAAE;AAAEG,cAAAA,IAAI,EAAEN,KAAK,CAACO;AAAd;AAA7B,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACH,KAT6B,CAW9B;;;AACA,QAAIT,KAAK,IAAIA,KAAK,CAACU,OAAN,CAAcJ,WAAW,CAACK,IAA1B,MAAoC,CAAC,CAAlD,EAAqD;AACjD;AACA;AACA;AAAA;AAAO,4BAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEJ,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACH,KAhB6B,CAkB9B;;;AACA;AAAA;AAAO,0BAAC,SAAD,oBAAeL,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACH,GApBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADG","sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\n// import { authenticationService } from '@/_services';\r\n\r\nexport const PrivateRoute = ({ component: Component, roles, ...rest }) => (\r\n    <Route {...rest} render={props => {\r\n        // const currentUser = authenticationService.currentUserValue;\r\n        console.log('current')\r\n        console.log(this.props)\r\n        console.log(this.state)\r\n        console.log(currentUser)\r\n        if (!currentUser) {\r\n            // not logged in so redirect to login page with the return url\r\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n        }\r\n\r\n        // check if route is restricted by role\r\n        if (roles && roles.indexOf(currentUser.role) === -1) {\r\n            // role not authorised so redirect to home page\r\n            //????? direct to stud or teac page\r\n            return <Redirect to={{ pathname: '/'}} />\r\n        }\r\n\r\n        // authorised so return component\r\n        return <Component {...props} />\r\n    }\r\n} />\r\n)"]},"metadata":{},"sourceType":"module"}