{"ast":null,"code":"/** \n *  SVGPan library 1.2.2\n * ======================\n *\n * Given an unique existing element with id \"viewport\" (or when missing, the \n * first g-element), including the the library into any SVG adds the following \n * capabilities:\n *\n *  - Mouse panning\n *  - Mouse zooming (using the wheel)\n *  - Object dragging\n *\n * You can configure the behaviour of the pan/zoom/drag with the variables\n * listed in the CONFIGURATION section of this file.\n *\n * This code is licensed under the following BSD license:\n *\n * Copyright 2009-2019 Andrea Leofreddi <a.leofreddi@vleo.net>. All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n * \n *    1. Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *    2. Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *    3. Neither the name of the copyright holder nor the names of its \n *       contributors may be used to endorse or promote products derived from \n *       this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS \n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY \n * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Andrea Leofreddi.\n */\n\"use strict\"; /// CONFIGURATION \n/// ====>\n\nvar enablePan = 1; // 1 or 0: enable or disable panning (default enabled)\n\nvar enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)\n\nvar enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)\n\nvar zoomScale = 0.5; // Zoom sensitivity\n/// <====\n/// END OF CONFIGURATION \n\nvar root = document.documentElement;\nvar state = 'none';\nvar svgRoot = null;\nvar stateTarget;\nvar stateOrigin;\nvar stateTf;\nsetupHandlers(root);\n/**\n * Register handlers\n */\n\nfunction setupHandlers(root) {\n  setAttributes(root, {\n    \"onmouseup\": \"handleMouseUp(evt)\",\n    \"onmousedown\": \"handleMouseDown(evt)\",\n    \"onmousemove\": \"handleMouseMove(evt)\" //\"onmouseout\" : \"handleMouseUp(evt)\", // Decomment this to stop the pan functionality when dragging out of the SVG element\n\n  });\n\n  if (navigator.userAgent.toLowerCase().indexOf('webkit') >= 0) {\n    window.addEventListener('mousewheel', handleMouseWheel, false);\n  } // Chrome/Safari\n  else {\n      window.addEventListener('DOMMouseScroll', handleMouseWheel, false);\n    } // Others\n\n}\n/**\n * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.\n */\n\n\nfunction getRoot(root) {\n  if (svgRoot == null) {\n    var r = root.getElementById(\"viewport\") ? root.getElementById(\"viewport\") : root.documentElement;\n    var t = r;\n\n    while (t != root) {\n      if (t.getAttribute(\"viewBox\")) {\n        setCTM(r, t.getCTM());\n        t.removeAttribute(\"viewBox\");\n      }\n\n      t = t.parentNode;\n    }\n\n    svgRoot = r;\n  }\n\n  return svgRoot;\n}\n/**\n * Instance an SVGPoint object with given event coordinates.\n */\n\n\nfunction getEventPoint(evt) {\n  var p = root.createSVGPoint();\n  p.x = evt.clientX;\n  p.y = evt.clientY;\n  return p;\n}\n/**\n * Sets the current transform matrix of an element.\n */\n\n\nfunction setCTM(element, matrix) {\n  var s = \"matrix(\" + matrix.a + \",\" + matrix.b + \",\" + matrix.c + \",\" + matrix.d + \",\" + matrix.e + \",\" + matrix.f + \")\";\n  element.setAttribute(\"transform\", s);\n}\n/**\n * Dumps a matrix to a string (useful for debug).\n */\n\n\nfunction dumpMatrix(matrix) {\n  var s = \"[ \" + matrix.a + \", \" + matrix.c + \", \" + matrix.e + \"\\n  \" + matrix.b + \", \" + matrix.d + \", \" + matrix.f + \"\\n  0, 0, 1 ]\";\n  return s;\n}\n/**\n * Sets attributes of an element.\n */\n\n\nfunction setAttributes(element, attributes) {\n  for (var i in attributes) {\n    element.setAttributeNS(null, i, attributes[i]);\n  }\n}\n/**\n * Handle mouse wheel event.\n */\n\n\nfunction handleMouseWheel(evt) {\n  if (!enableZoom) {\n    return;\n  }\n\n  if (evt.preventDefault) {\n    evt.preventDefault();\n  }\n\n  evt.returnValue = false;\n  var svgDoc = evt.target.ownerDocument;\n  var delta;\n\n  if (evt.wheelDelta) {\n    delta = evt.wheelDelta / 360;\n  } // Chrome/Safari\n  else {\n      delta = evt.detail / -9;\n    } // Mozilla\n\n\n  var z = Math.pow(1 + zoomScale, delta);\n  var g = getRoot(svgDoc);\n  var p = getEventPoint(evt);\n  p = p.matrixTransform(g.getCTM().inverse()); // Compute new scale matrix in current mouse position\n\n  var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);\n  setCTM(g, g.getCTM().multiply(k));\n\n  if (typeof stateTf == \"undefined\") {\n    stateTf = g.getCTM().inverse();\n  }\n\n  stateTf = stateTf.multiply(k.inverse());\n}\n/**\n * Handle mouse move event.\n */\n\n\nfunction handleMouseMove(evt) {\n  if (evt.preventDefault) {\n    evt.preventDefault();\n  }\n\n  evt.returnValue = false;\n  var svgDoc = evt.target.ownerDocument;\n  var g = getRoot(svgDoc);\n\n  if (state == 'pan' && enablePan) {\n    // Pan mode\n    var p = getEventPoint(evt).matrixTransform(stateTf);\n    setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));\n  } else if (state == 'drag' && enableDrag) {\n    // Drag mode\n    var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());\n    setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));\n    stateOrigin = p;\n  }\n}\n/**\n * Handle click event.\n */\n\n\nfunction handleMouseDown(evt) {\n  if (evt.preventDefault) {\n    evt.preventDefault();\n  }\n\n  evt.returnValue = false;\n  var svgDoc = evt.target.ownerDocument;\n  var g = getRoot(svgDoc);\n\n  if (evt.target.tagName == \"svg\" || !enableDrag // Pan anyway when drag is disabled and the user clicked on an element \n  ) {\n      // Pan mode\n      state = 'pan';\n      stateTf = g.getCTM().inverse();\n      stateOrigin = getEventPoint(evt).matrixTransform(stateTf);\n    } else {\n    // Drag mode\n    state = 'drag';\n    stateTarget = evt.target;\n    stateTf = g.getCTM().inverse();\n    stateOrigin = getEventPoint(evt).matrixTransform(stateTf);\n  }\n}\n/**\n * Handle mouse button release event.\n */\n\n\nfunction handleMouseUp(evt) {\n  if (evt.preventDefault) {\n    evt.preventDefault();\n  }\n\n  evt.returnValue = false;\n  var svgDoc = evt.target.ownerDocument;\n\n  if (state == 'pan' || state == 'drag') {\n    // Quit pan mode\n    state = '';\n  }\n}","map":{"version":3,"sources":["C:/Users/julia/Desktop/geo/geo/src/components/svgpan.js"],"names":["enablePan","enableZoom","enableDrag","zoomScale","root","document","documentElement","state","svgRoot","stateTarget","stateOrigin","stateTf","setupHandlers","setAttributes","navigator","userAgent","toLowerCase","indexOf","window","addEventListener","handleMouseWheel","getRoot","r","getElementById","t","getAttribute","setCTM","getCTM","removeAttribute","parentNode","getEventPoint","evt","p","createSVGPoint","x","clientX","y","clientY","element","matrix","s","a","b","c","d","e","f","setAttribute","dumpMatrix","attributes","i","setAttributeNS","preventDefault","returnValue","svgDoc","target","ownerDocument","delta","wheelDelta","detail","z","Math","pow","g","matrixTransform","inverse","k","createSVGMatrix","translate","scale","multiply","handleMouseMove","handleMouseDown","tagName","handleMouseUp"],"mappings":"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","sourcesContent":["/** \n *  SVGPan library 1.2.2\n * ======================\n *\n * Given an unique existing element with id \"viewport\" (or when missing, the \n * first g-element), including the the library into any SVG adds the following \n * capabilities:\n *\n *  - Mouse panning\n *  - Mouse zooming (using the wheel)\n *  - Object dragging\n *\n * You can configure the behaviour of the pan/zoom/drag with the variables\n * listed in the CONFIGURATION section of this file.\n *\n * This code is licensed under the following BSD license:\n *\n * Copyright 2009-2019 Andrea Leofreddi <a.leofreddi@vleo.net>. All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n * \n *    1. Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *    2. Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *    3. Neither the name of the copyright holder nor the names of its \n *       contributors may be used to endorse or promote products derived from \n *       this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS \n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY \n * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Andrea Leofreddi.\n */\n\n\"use strict\";\n\n/// CONFIGURATION \n/// ====>\n\nvar enablePan = 1; // 1 or 0: enable or disable panning (default enabled)\nvar enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)\nvar enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)\nvar zoomScale = 0.5; // Zoom sensitivity\n\n/// <====\n/// END OF CONFIGURATION \n\nvar root = document.documentElement;\nvar state = 'none';\nvar svgRoot = null;\nvar stateTarget;\nvar stateOrigin;\nvar stateTf;\n\nsetupHandlers(root);\n\n/**\n * Register handlers\n */\nfunction setupHandlers(root) {\n\tsetAttributes(root, {\n\t\t\"onmouseup\": \"handleMouseUp(evt)\",\n\t\t\"onmousedown\": \"handleMouseDown(evt)\",\n\t\t\"onmousemove\": \"handleMouseMove(evt)\",\n\t//\"onmouseout\" : \"handleMouseUp(evt)\", // Decomment this to stop the pan functionality when dragging out of the SVG element\n\t});\n\n\tif (navigator.userAgent.toLowerCase().indexOf('webkit') >= 0) {\n\t\twindow.addEventListener('mousewheel', handleMouseWheel, false);\n\t} // Chrome/Safari\n\telse {\n\t\twindow.addEventListener('DOMMouseScroll', handleMouseWheel, false);\n\t} // Others\n}\n\n/**\n * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.\n */\nfunction getRoot(root) {\n\tif (svgRoot == null) {\n\t\tvar r = root.getElementById(\"viewport\") ? root.getElementById(\"viewport\") : root.documentElement;\n\t\tvar t = r;\n\n\t\twhile (t != root) {\n\t\t\tif (t.getAttribute(\"viewBox\")) {\n\t\t\t\tsetCTM(r, t.getCTM());\n\n\t\t\t\tt.removeAttribute(\"viewBox\");\n\t\t\t}\n\n\t\t\tt = t.parentNode;\n\t\t}\n\n\t\tsvgRoot = r;\n\t}\n\n\treturn svgRoot;\n}\n\n/**\n * Instance an SVGPoint object with given event coordinates.\n */\nfunction getEventPoint(evt) {\n\tvar p = root.createSVGPoint();\n\n\tp.x = evt.clientX;\n\tp.y = evt.clientY;\n\n\treturn p;\n}\n\n/**\n * Sets the current transform matrix of an element.\n */\nfunction setCTM(element, matrix) {\n\tvar s = \"matrix(\" + matrix.a + \",\" + matrix.b + \",\" + matrix.c + \",\" + matrix.d + \",\" + matrix.e + \",\" + matrix.f + \")\";\n\n\telement.setAttribute(\"transform\", s);\n}\n\n/**\n * Dumps a matrix to a string (useful for debug).\n */\nfunction dumpMatrix(matrix) {\n\tvar s = \"[ \" + matrix.a + \", \" + matrix.c + \", \" + matrix.e + \"\\n  \" + matrix.b + \", \" + matrix.d + \", \" + matrix.f + \"\\n  0, 0, 1 ]\";\n\n\treturn s;\n}\n\n/**\n * Sets attributes of an element.\n */\nfunction setAttributes(element, attributes) {\n\tfor (var i in attributes) {\n\t\telement.setAttributeNS(null, i, attributes[i]);\n\t}\n}\n\n/**\n * Handle mouse wheel event.\n */\nfunction handleMouseWheel(evt) {\n\tif (!enableZoom) {\n\t\treturn;\n\t}\n\n\tif (evt.preventDefault) {\n\t\tevt.preventDefault();\n\t}\n\n\tevt.returnValue = false;\n\n\tvar svgDoc = evt.target.ownerDocument;\n\n\tvar delta;\n\n\tif (evt.wheelDelta) {\n\t\tdelta = evt.wheelDelta / 360;\n\t} // Chrome/Safari\n\telse {\n\t\tdelta = evt.detail / -9;\n\t} // Mozilla\n\n\tvar z = Math.pow(1 + zoomScale, delta);\n\n\tvar g = getRoot(svgDoc);\n\n\tvar p = getEventPoint(evt);\n\n\tp = p.matrixTransform(g.getCTM().inverse());\n\n\t// Compute new scale matrix in current mouse position\n\tvar k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);\n\n\tsetCTM(g, g.getCTM().multiply(k));\n\n\tif (typeof (stateTf) == \"undefined\") {\n\t\tstateTf = g.getCTM().inverse();\n\t}\n\n\tstateTf = stateTf.multiply(k.inverse());\n}\n\n/**\n * Handle mouse move event.\n */\nfunction handleMouseMove(evt) {\n\tif (evt.preventDefault) {\n\t\tevt.preventDefault();\n\t}\n\n\tevt.returnValue = false;\n\n\tvar svgDoc = evt.target.ownerDocument;\n\n\tvar g = getRoot(svgDoc);\n\n\tif (state == 'pan' && enablePan) {\n\t\t// Pan mode\n\t\tvar p = getEventPoint(evt).matrixTransform(stateTf);\n\n\t\tsetCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));\n\t} else if (state == 'drag' && enableDrag) {\n\t\t// Drag mode\n\t\tvar p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());\n\n\t\tsetCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));\n\n\t\tstateOrigin = p;\n\t}\n}\n\n/**\n * Handle click event.\n */\nfunction handleMouseDown(evt) {\n\tif (evt.preventDefault) {\n\t\tevt.preventDefault();\n\t}\n\n\tevt.returnValue = false;\n\n\tvar svgDoc = evt.target.ownerDocument;\n\n\tvar g = getRoot(svgDoc);\n\n\tif (\n\t\tevt.target.tagName == \"svg\"\n\t\t|| !enableDrag // Pan anyway when drag is disabled and the user clicked on an element \n\t) {\n\t\t// Pan mode\n\t\tstate = 'pan';\n\n\t\tstateTf = g.getCTM().inverse();\n\n\t\tstateOrigin = getEventPoint(evt).matrixTransform(stateTf);\n\t} else {\n\t\t// Drag mode\n\t\tstate = 'drag';\n\n\t\tstateTarget = evt.target;\n\n\t\tstateTf = g.getCTM().inverse();\n\n\t\tstateOrigin = getEventPoint(evt).matrixTransform(stateTf);\n\t}\n}\n\n/**\n * Handle mouse button release event.\n */\nfunction handleMouseUp(evt) {\n\tif (evt.preventDefault) {\n\t\tevt.preventDefault();\n\t}\n\n\tevt.returnValue = false;\n\n\tvar svgDoc = evt.target.ownerDocument;\n\n\tif (state == 'pan' || state == 'drag') {\n\t\t// Quit pan mode\n\t\tstate = '';\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}